<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe vs System</title>
    <style>
        body {
            font-family: sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            margin: 0;
            background-color: #f4f4f4;
        }

        .board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
            margin-bottom: 20px;
            background-color: #ccc;
            padding: 5px;
            border-radius: 8px;
        }

        .cell {
            width: 100px;
            height: 100px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2em;
            cursor: pointer;
            background-color: #fff;
            border-radius: 4px;
        }

        .cell:nth-child(2), .cell:nth-child(4), .cell:nth-child(6), .cell:nth-child(8) {
            background-color: #e0e0e0;
        }

        .message {
            font-size: 1.5em;
            margin-bottom: 10px;
        }

        button {
            padding: 10px 20px;
            font-size: 1em;
            cursor: pointer;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
        }

        button:hover {
            background-color: #45a049;
        }

        .winning-line-row-0 .cell:nth-child(1),
        .winning-line-row-0 .cell:nth-child(2),
        .winning-line-row-0 .cell:nth-child(3),
        .winning-line-row-1 .cell:nth-child(4),
        .winning-line-row-1 .cell:nth-child(5),
        .winning-line-row-1 .cell:nth-child(6),
        .winning-line-row-2 .cell:nth-child(7),
        .winning-line-row-2 .cell:nth-child(8),
        .winning-line-row-2 .cell:nth-child(9),
        .winning-line-col-0 .cell:nth-child(1),
        .winning-line-col-0 .cell:nth-child(4),
        .winning-line-col-0 .cell:nth-child(7),
        .winning-line-col-1 .cell:nth-child(2),
        .winning-line-col-1 .cell:nth-child(5),
        .winning-line-col-1 .cell:nth-child(8),
        .winning-line-col-2 .cell:nth-child(3),
        .winning-line-col-2 .cell:nth-child(6),
        .winning-line-col-2 .cell:nth-child(9),
        .winning-line-diag-tl-br .cell:nth-child(1),
        .winning-line-diag-tl-br .cell:nth-child(5),
        .winning-line-diag-tl-br .cell:nth-child(9),
        .winning-line-diag-tr-bl .cell:nth-child(3),
        .winning-line-diag-tr-bl .cell:nth-child(5),
        .winning-line-diag-tr-bl .cell:nth-child(7) {
            background-color: lightgreen;
        }
    </style>
</head>
<body>
    <h1>Tic-Tac-Toe vs System</h1>
    <div class="message">Your turn (X)</div>
    <div class="board">
        <div class="cell" data-index="0"></div>
        <div class="cell" data-index="1"></div>
        <div class="cell" data-index="2"></div>
        <div class="cell" data-index="3"></div>
        <div class="cell" data-index="4"></div>
        <div class="cell" data-index="5"></div>
        <div class="cell" data-index="6"></div>
        <div class="cell" data-index="7"></div>
        <div class="cell" data-index="8"></div>
    </div>
    <button id="resetButton">Reset Game</button>

    <script>
        const boardElement = document.querySelector('.board');
        const cells = document.querySelectorAll('.cell');
        const messageElement = document.querySelector('.message');
        const resetButton = document.getElementById('resetButton');
        let currentPlayer = 'X'; // Player is X, System is O
        let gameBoard = ['', '', '', '', '', '', '', '', ''];
        let gameActive = true;

        const winningCombinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8],
            [0, 3, 6], [1, 4, 7], [2, 5, 8],
            [0, 4, 8], [2, 4, 6]
        ];

        function handleCellClick(clickedCellEvent) {
            const clickedCell = clickedCellEvent.target;
            const clickedCellIndex = parseInt(clickedCell.dataset.index);

            if (!gameActive || gameBoard[clickedCellIndex] !== '') {
                return;
            }

            gameBoard[clickedCellIndex] = currentPlayer;
            clickedCell.textContent = currentPlayer;

            checkWin();
            if (gameActive) {
                switchPlayer();
                if (currentPlayer === 'O' && gameActive) {
                    setTimeout(systemTurn, 500); // Add a small delay for the system's move
                }
            }
        }

        function switchPlayer() {
            currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
            messageElement.textContent = currentPlayer === 'X' ? 'Your turn (X)' : 'System\'s turn (O)';
        }

        function checkWin() {
            for (let i = 0; i <= 7; i++) {
                const winCondition = winningCombinations[i];
                const a = gameBoard[winCondition[0]];
                const b = gameBoard[winCondition[1]];
                const c = gameBoard[winCondition[2]];
                if (a === '' || b === '' || c === '') {
                    continue;
                }
                if (a === b && b === c) {
                    gameActive = false;
                    messageElement.textContent = (a === 'X' ? 'You' : 'System') + ' wins!';
                    highlightWinningLine(winCondition);
                    return;
                }
            }

            if (!gameBoard.includes('')) {
                gameActive = false;
                messageElement.textContent = "It's a draw!";
            }
        }

        function highlightWinningLine(winCondition) {
            if (winCondition[0] === 0 && winCondition[1] === 1) boardElement.classList.add('winning-line-row-0');
            if (winCondition[0] === 3 && winCondition[1] === 4) boardElement.classList.add('winning-line-row-1');
            if (winCondition[0] === 6 && winCondition[1] === 7) boardElement.classList.add('winning-line-row-2');
            if (winCondition[0] === 0 && winCondition[1] === 3) boardElement.classList.add('winning-line-col-0');
            if (winCondition[0] === 1 && winCondition[1] === 4) boardElement.classList.add('winning-line-col-1');
            if (winCondition[0] === 2 && winCondition[1] === 5) boardElement.classList.add('winning-line-col-2');
            if (winCondition[0] === 0 && winCondition[1] === 4) boardElement.classList.add('winning-line-diag-tl-br');
            if (winCondition[0] === 2 && winCondition[1] === 4) boardElement.classList.add('winning-line-diag-tr-bl');
        }

        function resetGame() {
            gameActive = true;
            currentPlayer = 'X';
            gameBoard = ['', '', '', '', '', '', '', '', ''];
            messageElement.textContent = 'Your turn (X)';
            cells.forEach(cell => {
                cell.textContent = '';
            });
            boardElement.className = 'board';
        }

        function systemTurn() {
            if (!gameActive) return;

            const emptyCells = gameBoard.reduce((acc, cell, index) => {
                if (cell === '') {
                    acc.push(index);
                }
                return acc;
            }, []);

            if (emptyCells.length > 0) {
                const randomIndex = Math.floor(Math.random() * emptyCells.length);
                const systemMoveIndex = emptyCells[randomIndex];

                gameBoard[systemMoveIndex] = 'O';
                cells[systemMoveIndex].textContent = 'O';
                checkWin();
                if (gameActive) {
                    switchPlayer();
                }
            }
        }

        cells.forEach(cell => cell.addEventListener('click', handleCellClick));
        resetButton.addEventListener('click', resetGame);
    </script>
</body>
</html>
